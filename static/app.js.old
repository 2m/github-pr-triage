function start(deployments, owner, repo) {

  var shas = {};
  $('#deployments').append($('<th>').text('Master'));
  $.each(deployments, function(i, thing) {
    var $th = ($('<th>').attr('id', thing.name+'-col')
      .append($('<a>').attr('title', 'Show column in Bugzilla').text(thing.name)));
    $('#deployments').append($th);
    shas[thing.name] = thing.sha;
  });
  function commit_url(sha) {
    return 'https://github.com/' + owner + '/' + repo + '/commit/' + sha;
  }
  function bug_url(id) {
    return 'https://bugzilla.mozilla.org/show_bug.cgi?id=' + id;
  }
  function bug_id(commit) {
    var msg = commit.commit.message;
    if (msg.match(/\d{6,7}/g)) return msg.match(/\d{6,7}/g)[0];
    return false;
  }

  function link_cols() {
    $.each(deployments, function(i, thing) {
      var bug_query = thing.bugs.join('%2C');
      $('#'+thing.name+'-col a')
        .attr('href', 'https://bugzilla.mozilla.org/buglist.cgi?bug_id='+bug_query+'&bug_id_type=anyexact&bug_status=ALL');
    });
  }

  function make_message(commit) {
    var msg = commit.commit.message;
    var sha = commit.sha;
    var cell = $('<td>');
    if (commit.author && commit.author.avatar_url) {
      cell.append($('<a>')
                  .attr('href', commit.author.html_url)
      .append($('<img>')
               .attr('src', commit.author.avatar_url)
               .attr('width', '36')
         .attr('height', '36')));
    }

    bug_number = bug_id(commit);
    if (bug_number) {
      cell.append($('<a>')
                   .attr('href', bug_url(bug_number))
       .data('id', bug_number)
                   .attr('id', 'bug-' + bug_number)
       .addClass('bugzilla')
       .text(bug_number));
      cell.append($('<span>').text(' - '));
    }
    cell.append($('<a>').attr('href', commit.html_url).text(msg));
    return cell;
  }
  //var first_sha = deployments[0].sha;
  $('#cap').hide();
  $.getJSON('https://api.github.com/repos/' + owner + '/' + repo + '/commits',
            //{sha: first_sha},
      function(response) {

    var matched = {};
    var $commits = $('#commits');
    var keep_going = true;
    var cap = true;

    $.each(response, function(i, commit) {
      if (!keep_going && cap) return;
      $.each(shas, function(name, sha) {
        if (sha === commit.sha) {
          matched[name] = true;
        } else if (sha === commit.sha.substring(0, 7)) {
          matched[name] = true;
          commit.sha = commit.sha.substring(0, 7);
        }
      });
      console.log(commit);
      var row = $('<tr>').append(make_message(commit));
      var all = true;
      $.each(deployments, function(i, thing) {
        if (matched[thing.name]) {
          row.append($('<td>').append($('<i class="glyphicon glyphicon-ok"></i>')));
          bug_number = bug_id(commit);
          if (bug_number) thing.bugs.push(bug_number);
        } else {
          all = false;
          row.append($('<td>').text(''));
        }
      });
      row.appendTo($commits);
      if (all) {
        link_cols();
  fetch_bugzilla_metadata();
        keep_going = false;
        $('#cap').show();
      }
    });

    var req = $.post('/shortenit', {url: location.href});
    req.then(function(r) {
      $('#shorten a').attr('href', r.url).text(r.url);
      $('#shorten').show();
    });
    req.fail(function(jqXHR, textStatus, errorThrown) {
      console.warn('URL shortening service failed', errorThrown);
    });

  });
}

function init(owner, repo, callback) {
  // document.title = "What's deployed on " + owner + "/" + repo + "?";

  var req = $.ajax({
    url: '/proxy/repos/' + owner + '/' + repo + '/pulls?state=open',
    type: 'GET',
    contentType: 'application/json'
  });
  req.then(function(response) {
    if (response.error) {
      alert('not implemented error');
      $('#error p').text(response.error);
      $('#error').show();
    } else {
      $.each(response, function(i, pull) {
        console.log('URL', pull.html_url);
        console.log('TITLE', pull.title);
        console.log('UPDATED', pull.updated);
      });
      console.dir(response);
      // start(owner, repo);
    }
    if (callback) callback();
  });
  req.fail(function(jqxhr, status, error) {
    console.warn("Unable to convert deployments to sha", error);
  });
  var repo_url = 'https://github.com/' + owner + '/' + repo;
  $('.repo').append($('<a>').attr('href', repo_url).text(repo_url));
  $.each(deployments, function(i, each) {
    $('<dd>').append($('<a>').attr('href', each.url).text(each.name))
      .insertAfter('.urls');
  });
}


function params_to_deployment(qs, callback) {
  var params = $.parseParams(qs.split('?')[1]);
  var owner, repo;
  if (params.owner) {
    owner = params.owner;
    $('#owner').val(owner);
  }
  if (params.repo) {
    repo = params.repo;
    $('#repo').val(repo);
  }
  if (owner && repo) {
    init(owner, repo,callback);
    $('form').hide();
  } else if (callback) {
    callback();
  }
}

function fetch_bugzilla_metadata() {
  var ids = [];
  $('a.bugzilla').each(function() {
    ids.push($(this).data('id'));
  });
  var data = {id: ids.join(','), include_fields: 'status,id,resolution'};
  var URL = 'https://api-dev.bugzilla.mozilla.org/1.3';
  var req = $.ajax({
    url: 'https://api-dev.bugzilla.mozilla.org/1.3/bug',
    data: data,
    contentType: 'application/json',
    accepts: 'application/json'
  });
  req.done(function(response) {
      if (response.bugs) {
        $.each(response.bugs, function(i, bug) {
          var $link = $('#bug-' + bug.id);
          if ($link.length) {
            $link.attr('title', bug.status + ' ' + bug.resolution);
            if (bug.status === 'RESOLVED' || bug.status === 'VERIFIED') {
              $link.addClass('resolved');
            }
          }
        });
      }
  });
}

$(function() {

  var dotter = setInterval(function() {
      var c = $('#cloak .dots');
      c.text(c.text() + '.');
      if (c.text().match(/\./g).length > 10) {
        clearInterval(dotter);
        $('#cloak p').text(" F' it! I give up! This is taking too long.");
      }
  }, 1000);

  if (location.search) {
    params_to_deployment(location.search, function() {
      $('#cloak').hide();
      $('#table').fadeIn(500);
      clearInterval(dotter);
    });
  } else {
    $('form').fadeIn(500);
    $('#cloak').hide();
    clearInterval(dotter);
  }
});
